//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Prefabs/TD_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TD_Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TD_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TD_Controls"",
    ""maps"": [
        {
            ""name"": ""TD_BuilderControls"",
            ""id"": ""1c8d34b2-8816-43d2-87e4-59a1a260488b"",
            ""actions"": [
                {
                    ""name"": ""Accept"",
                    ""type"": ""Button"",
                    ""id"": ""d7305fd9-4225-4994-adc0-f649c50c7887"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""89439113-159d-42c7-8902-0ccd8075b1f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1177e480-ee16-4a70-986a-5166b5fdb136"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""304c3b5c-983b-4b50-b4e4-7a326b36c4f0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5761c544-6e39-483a-9e1b-eba5faf90c18"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eea6b8b9-176e-4e0a-9860-019cc08e9e1d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a96ffded-aba2-4f75-8200-d1e94028ce5f"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""e4a0e4f5-eafc-40d1-b355-80216689cf68"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""45ac036a-ad15-4979-8831-3bd5103f3617"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6f70fae5-ae3f-4e92-b1ff-ca697f3baba3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""42cc1b2b-f3bd-4fd5-b416-7c7cd43232a4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a076f7d1-86d2-45a5-a895-4f5dda8ce056"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TD_BuilderControls
        m_TD_BuilderControls = asset.FindActionMap("TD_BuilderControls", throwIfNotFound: true);
        m_TD_BuilderControls_Accept = m_TD_BuilderControls.FindAction("Accept", throwIfNotFound: true);
        m_TD_BuilderControls_Cancel = m_TD_BuilderControls.FindAction("Cancel", throwIfNotFound: true);
        m_TD_BuilderControls_Move = m_TD_BuilderControls.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TD_BuilderControls
    private readonly InputActionMap m_TD_BuilderControls;
    private ITD_BuilderControlsActions m_TD_BuilderControlsActionsCallbackInterface;
    private readonly InputAction m_TD_BuilderControls_Accept;
    private readonly InputAction m_TD_BuilderControls_Cancel;
    private readonly InputAction m_TD_BuilderControls_Move;
    public struct TD_BuilderControlsActions
    {
        private @TD_Controls m_Wrapper;
        public TD_BuilderControlsActions(@TD_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accept => m_Wrapper.m_TD_BuilderControls_Accept;
        public InputAction @Cancel => m_Wrapper.m_TD_BuilderControls_Cancel;
        public InputAction @Move => m_Wrapper.m_TD_BuilderControls_Move;
        public InputActionMap Get() { return m_Wrapper.m_TD_BuilderControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TD_BuilderControlsActions set) { return set.Get(); }
        public void SetCallbacks(ITD_BuilderControlsActions instance)
        {
            if (m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface != null)
            {
                @Accept.started -= m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface.OnAccept;
                @Accept.performed -= m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface.OnAccept;
                @Accept.canceled -= m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface.OnAccept;
                @Cancel.started -= m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface.OnCancel;
                @Move.started -= m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_TD_BuilderControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Accept.started += instance.OnAccept;
                @Accept.performed += instance.OnAccept;
                @Accept.canceled += instance.OnAccept;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public TD_BuilderControlsActions @TD_BuilderControls => new TD_BuilderControlsActions(this);
    public interface ITD_BuilderControlsActions
    {
        void OnAccept(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
